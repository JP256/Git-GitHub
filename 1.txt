testing 
testing 
testing 
testing 

//////////////////////////////////
generating conflicts
more stuffs
more stuffs
more stuffs
more stuffs
more stuffs
/////////////////////////////////
git status
git log 
git log --oneline
git log --abbrev-commit
git init
git add .
git add 1.txt 2.txt
git commit -m "first commit"
git commit --amend 
git commit -a -m "second commit"

git branch 
git branch firstB
git switch firstB
git switch -c secondB
git checkout firstB
git checkout -b thirdB
git branch -d secondB
git branch -D secondB
git branch -m newName
git branch -v

git merge secondBToMaster

git diff           -> working dir and staged area
git diff --staged  -> staged area and repo
git diff head      -> everything that is not in repo
git diff branch1..branch2
git diff commit1..commit2


// we do this when you dont want to commit yet, we 
// save the changes into the stash and open another branch
// and paste it there, play with it and then go back and commit
egit stash        -> working dir and stageing area to stash
git stash save
git stash pop
git stash apply
git statsh pply stash@{2}
git stash list
git stash drop stash@{2}
git stash clear


// undoing changes and time traveling
git checkout d8812d   -> trveling in time
git checkout master   -> to go back
git checkout HEAD~1
git checkout HEAD~2

git checkout head dog.txt cat.txt -> delete changes no commited
git checkout -- dog.txt 

// git restore: helps to unstage or even discard uncommited local changes
// undo git add .
git restore 1.txt          --> remove new changes from working directory 
git restore --staged 1.txt --> remove changes from staged area
git restore --source head~1 1.txt


// delete history
git reset 343rdr2  -> remove the following commit until the selected one
git reset --hard 3223dsf -> remove remove commit and changes from working directory
git reset --hard head~1

// doesn't delete history
git revert 343dfdf -> goes back and create a new commit, with the old information, it doesnt delete the history

//////////// GitHub
git clone https://... -> initialize a new repo on your machine

there are two ways of using GitHub
1. create a repo in github and clone it to your local computer
2. create a local project, create a github project and connect them

git remote -v
git remote add origin https://...
git remote rename old new
git remote remove name

git push remoteName branchName
git push origin master
git push origin pancake:master 
git push -u 
git push -u origin master

git branch -r 
git push origin main 
